{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Section","children","name","className","Profile","profile","href","url","username","getIcon","network","toLowerCase","Skills","skills","map","skill","Education","education","getFormattedDate","startDate","endDate","area","studyType","institution","Experience","work","w","position","website","target","company","summary","date1","date2","diffDate","Date","getTime","toISOString","slice","getMonth","calcDate","highlights","item","date","parts","Intl","DateTimeFormat","year","month","formatToParts","parse","value","App","basics","resume","projects","label","profiles","points","point","ed","keywords","project","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.35cc74bf.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport resume from './resume.json';\n\nfunction App() {\n    const {basics, education, projects, skills, work} = resume;\n    return (\n        <>\n            <div className=\"header\">\n                <div className=\"grid-container\">\n                    <div className=\"name\">\n                        <h1>{basics.name}</h1>\n                        <h2>{basics.label}</h2>\n                    </div>\n                    <div className=\"social\">\n                        {basics.profiles.map(profile => <Profile profile={profile}/>)}\n                    </div>\n                </div>\n\n            </div>\n            <section>\n                <h2 className=\"content-subhead\">Summary</h2>\n                <span>\n                    {basics.summary}\n                </span>\n                <ul>\n                    {basics.points.map(point => {\n                        return <li>{point}</li>\n                    })}\n                </ul>\n            </section>\n\n            <Section name=\"Education\">\n                <ul className=\"no-list-style\">\n                    {education.map(ed => <li>\n                        <Education education={ed}/>\n                    </li>)}\n                </ul>\n            </Section>\n\n            <Section name=\"Skills\"><Skills skills={skills[0].keywords}/></Section>\n\n            <Section name=\"Work\"><Experience work={work}/></Section>\n\n            <Section name=\"Personal Projects\">\n                {projects && <ul>\n                    {projects.map(project => {\n                        return <li><strong>{project.name}</strong> - <a href={project.website}>{project.website}</a>\n                            <div>{project.summary}</div>\n                        </li>\n                    })}\n                </ul>}\n\n            </Section>\n\n            {/*<Section name=\"Other works\">*/}\n            {/*    <ul className=\"no-list-style\">*/}\n            {/*        {education.map(ed => <li>*/}\n            {/*            <Education education={ed}/>*/}\n            {/*        </li>)}*/}\n            {/*    </ul>*/}\n            {/*</Section>*/}\n        </>\n    );\n}\n\nconst Section = ({children, name}) => {\n    return <section>\n        <h2 className=\"content-subhead\">{name}</h2>\n        {children}\n    </section>\n}\n\nconst Profile = ({profile}) => {\n    return <li className=\"profile-items no-list-style\">\n        <a href={profile.url}>{profile.username} {getIcon(profile.network.toLowerCase())}</a>\n    </li>\n}\n\nconst Skills = ({skills}) => {\n    return <ul className=\"skills\">\n        {skills.map(skill => <li className=\"chip\">{skill}</li>)}\n    </ul>\n}\n\nconst getIcon = (network) => {\n    switch (network) {\n        case 'github' :\n            return <i className=\"fab fa-github\"/>;\n        case 'stackoverflow':\n            return <i className=\"fab fa-stack-overflow\"/>;\n        case 'linkedin':\n            return <i className=\"fab fa-linkedin\"/>;\n        case 'phone':\n            return <i className=\"fa fa-phone\"/>;\n        case 'email':\n            return <i className=\"fa fa-envelope\"/>;\n        default:\n    }\n}\n\nconst Education = ({education}) => {\n    return <ul className=\"no-list-style\">\n        <li>\n            <div>\n                <div className=\"float-right\"><small>\n                    {getFormattedDate(education.startDate)} {education.startDate ? '-' : ''} {getFormattedDate(education.endDate)}</small>\n                </div>\n                <div><strong>{education.area}, {education.studyType}&nbsp;</strong>\n                    <br/>\n                    {education.institution}\n                </div>\n            </div>\n        </li>\n    </ul>\n}\n\nconst Experience = ({work}) => {\n    return <ul className=\"no-list-style\">\n        {work.map(w => <li>\n            <div>\n                <div>\n                    <strong>{w.position}</strong> | <a href={w.website}\n                                                       target=\"_blank\">{w.company}</a> | <span\n                    className=\"italics\">{w.summary}</span> <small\n                    className=\"float-right\">\n                    <span className=\"space-right\">\n                        <i className=\"time-icon far fa-clock\"/>\n                        {getFormattedDate(w.startDate)} - {w.endDate ? getFormattedDate(w.endDate) : '*'}\n                        {w.endDate && (' (' + calcDate(w.endDate, w.startDate) + ')')}\n                    </span>\n                </small>\n                </div>\n                <div>\n\n                </div>\n                <ul>\n                    {w.highlights.map(item => <li>\n                        <div>{item}</div>\n                    </li>)}\n                </ul>\n            </div>\n        </li>)}\n    </ul>\n}\n\nconst getFormattedDate = (date) => {\n    if (!date) return '';\n    const options = {year: 'numeric', month: 'short'};\n    const dateTimeFormat = new Intl.DateTimeFormat('en-US', options);\n    const parts = dateTimeFormat.formatToParts(new Date(Date.parse(date)));\n    return parts[0].value + ', ' + (parts[2].value - 2000);\n}\n\nfunction calcDate(date1, date2) {\n    if (!date1) return ''\n    const diffDate = new Date(new Date(date1).getTime() - new Date(date2).getTime());\n    return ((diffDate.toISOString().slice(0, 4) - 1970) + \" yrs\" +\n        (diffDate.getMonth() < 1 ? \"\" : ' ' + (diffDate.getMonth() + \" mos\"))  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}